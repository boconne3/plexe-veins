[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s
num-rngs = 6

ned-path = .
network = Highway

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 60 s

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "org.car2x.veins.modules.application.platooning.PlatoonCar"
*.manager.moduleName = "node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

#*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.phy80211p.sensitivity = -94dBm
#*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useThermalNoise = true
#*.**.nic.phy80211p.thermalNoise = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895


##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].unicast.rng-0 = 1
*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/freeway.sumo.cfg"

##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCars = 1}
**.numberOfCarsPerPlatoon = ${platoonSize = 8}
**.numberOfLanes = ${nLanes = 1}

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.node[*].helper.nLanes = ${nLanes}
*.node[*].helper.platoonSize = ${platoonSize}
*.node[*].helper.nCars = ${nCars}

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
#*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = ${ploegH = 0.5}s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7

#*.node[*].scenario.useRealisticEngine = false
# N.B.
#*.node[*].scenario.useRealisticEngine = true
#*.node[*].scenario.actuatorDelay = 0.5 s
# N.B.


#via wireless send acceleration computed by the controller, not the actual one
*.node[*].scenario.useControllerAcceleration = true

#controllers to be tested
#**.numericController = ${controller = 0, 0, 1, 2, 3, 4}
#*.node[*].scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS", "FLATBED" ! controller}

#CUSTOM
#**.numericController = ${controller = 0, 1}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC" ! controller}
#**.headway = ${headway = 0.3, 0.1 ! controller}s

#headway for ACCs
#**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1, 0.1 ! controller}s
*.node[*].scenario.accHeadway = ${headway}s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2}s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
#*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].prot.priority = 4
#packet size for platooning beacon
*.node[*].prot.packetSize = ${packetSize = 200}
#set to 0 the packet loss rate for the unicast protocol
#*.node[*].unicast.packetLossRate = ${packetLossRate = 0, 0.05, 0.1, 0.25, 0.5}

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "PlatoonsTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#insert vehicles already at steady-state. distance depends on controller
#**.traffic.platoonInsertDistance = ${2, 2, 5, 2, 15, 5 ! controller}m
#**.traffic.platoonInsertHeadway = ${0.3, 1.2, 0, 0.5, 0.8, 0 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

#CUSTOM
#**.traffic.platoonInsertDistance = ${2, 5 ! controller}m
#**.traffic.platoonInsertHeadway = ${0.3, 0 ! controller}s

#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

[Config Sinusoidal]

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

*.node[*].scenario.useRealisticEngine = false
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -95}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

#**.numericController = ${controller = 0, 1}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC" ! controller}
**.numericController = ${controller = 3}
*.node[*].scenario.controller = ${sController = "CONSENSUS" ! controller}
**.headway = ${headway = 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${15 ! controller}m
**.traffic.platoonInsertHeadway = ${0.8 ! controller}s

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config Braking]

*.manager.useGui = true

#use the braking scenario
*.node[*].scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.brakingDeceleration = 8 mpsps

*.node[*].scenario.startBraking = 10 s

*.node[*].scenario.useRealisticEngine = false
*.node[*].scenario.engineTau = ${actDelay = 0.5}s
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -95}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

#**.numericController = ${controller = 0, 1}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC" ! controller}
#**.headway = ${headway = 0.3, 0.1 ! controller}s
#**.traffic.platoonInsertDistance = ${20, 20 ! controller}m
#**.traffic.platoonInsertHeadway = ${0, 0 ! controller}s

**.numericController = ${controller = 1}
*.node[*].scenario.controller = ${sController = "CACC" ! controller}
**.headway = ${headway = 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${5 ! controller}m
**.traffic.platoonInsertHeadway = ${ 0 ! controller}s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${actDelay}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${actDelay}.sca


[Config SinusoidalPLoss]

*.manager.useGui = true

#use the braking scenario
#*.node[*].scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
#*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
#*.node[*].scenario.brakingDeceleration = 8 mpsps
#*.node[*].scenario.startBraking = 5 s


#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

*.node[*].scenario.useRealisticEngine = false
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -95}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
#*.**.nic.mac1609_4.txPower = ${txPower = 20}dBm
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

**.numericController = ${controller = 1}
*.node[*].scenario.controller = ${sController = "CACC"}
**.headway = ${headway = 0.1}s
**.traffic.platoonInsertDistance = ${5}m
**.traffic.platoonInsertHeadway = ${0}s

#**.numericController = ${controller = 0, 1}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC" ! controller}
#**.headway = ${headway = 0.3, 0.3 ! controller}s
#**.traffic.platoonInsertDistance = ${2, 5 ! controller}m
#**.traffic.platoonInsertHeadway = ${0.3, 0 ! controller}s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config SinusoidalBeacInt]

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

*.node[*].scenario.useRealisticEngine = false
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -95}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.05, 0.1, 0.25, 0.5}s

**.numericController = ${controller = 0, 1}
*.node[*].scenario.controller = ${sController = "ACC", "CACC" ! controller}
**.headway = ${headway = 0.3, 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${2, 5 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 0 ! controller}s

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${beaconInterval}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${beaconInterval}_${repetition}.sca

[Config SinusoidalTxPower]

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

*.node[*].scenario.useRealisticEngine = false
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -95}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

**.numericController = ${controller = 0, 1, 2}
*.node[*].scenario.controller = ${sController = "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
**.headway = ${headway = 0.3, 0.1, 0.1, 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${2, 5, 2, 15 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 0, 0.5, 0.8 ! controller}s

#**.numericController = ${controller = 2}
#*.node[*].scenario.controller = ${sController = "PLOEG"}
#**.headway = ${headway = 0.1}s
#**.traffic.platoonInsertDistance = ${2}m
#**.traffic.platoonInsertHeadway = ${0.5}s

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${txPower}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${txPower}_${repetition}.sca

[Config SinusoidalThermalNoise]

#**.numericController = ${controller = 0, 1, 2, 3}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
#**.headway = ${headway = 0.3, 0.1, 0.1, 0.1 ! controller}s
#**.traffic.platoonInsertDistance = ${2, 5, 2, 15 ! controller}m
#**.traffic.platoonInsertHeadway = ${0.3, 0, 0.5, 0.8 ! controller}s

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

*.node[*].scenario.useRealisticEngine = false
#*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -60.1, -60.3}dBm
*.**.nic.phy80211p.thermalNoise = ${thermalNoise = -80}dBm
*.**.nic.mac1609_4.txPower = ${txPower = 100}mW
*.**.nic.phy80211p.maxTXPower = ${txPower}mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

**.numericController = ${controller = 0, 1, 2}
*.node[*].scenario.controller = ${sController = "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
**.headway = ${headway = 0.3, 0.1, 0.1, 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${2, 5, 2, 15 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 0, 0.5, 0.8 ! controller}s

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${thermalNoise}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${thermalNoise}_${repetition}.sca

[Config SinusoidalActDelay]

*.manager.useGui = true

#*.node[*].scenario_type = "BrakingScenario"
#*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
#*.node[*].scenario.brakingDeceleration = 8 mpsps
#*.node[*].scenario.startBraking = 10 s

*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s


#*.node[*].scenario.useRealisticEngine = true
#*.node[*].scenario.vehicleFile = "vehicles.xml"
#*.node[*].scenario.vehicleType = ${vType = "alfa-147", "alfa-147-slow", "alfa-147-slowest"}
#**.actDelay = ${actDelay = 0.1, 0.5, 1 ! vType}s

#*.node[*].scenario.vehicleType = ${vType = "alfa-147-slowest"}
#**.actDelay = ${actDelay = 1 ! vType}s

*.node[*].scenario.useRealisticEngine = false
*.node[*].scenario.engineTau = ${actDelay = 0, 0.5, 1, 2}s

*.**.nic.phy80211p.thermalNoise = -95 dBm
*.**.nic.mac1609_4.txPower = 100 mW
*.**.nic.phy80211p.maxTXPower = 100 mW
*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

#**.numericController = ${controller = 0, 1, 2, 3}
#*.node[*].scenario.controller = ${sController = "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
#**.headway = ${headway = 0.3, 0.1, 0.1, 0.1 ! controller}s
#**.traffic.platoonInsertDistance = ${2, 5, 2, 15 ! controller}m
#**.traffic.platoonInsertHeadway = ${0.3, 0, 0.5, 0.8 ! controller}s

**.numericController = ${controller = 1}
*.node[*].scenario.controller = ${sController = "CACC"}
**.headway = ${headway = 0.1}s
**.traffic.platoonInsertDistance = ${5}m
**.traffic.platoonInsertHeadway = ${0}s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${actDelay}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${actDelay}_${repetition}.sca

[Config SinusoidalControllers]

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

*.node[*].unicast.packetLossRate = ${packetLossRate = 0}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

**.numericController = ${controller = 0, 0, 1, 2, 3, 4}
*.node[*].scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS", "FLATBED" ! controller}
**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1, 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${2, 2, 5, 2, 15, 5 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 1.2, 0, 0.5, 0.8, 0 ! controller}s

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config SinusoidalNoACC]

#remove all variables which hold values for ACC simulations
**.numericController = ${controller = 1}
*.node[*].scenario.controller = ${sController = "CACC" ! controller}
**.headway = ${headway = 0.1 ! controller}s
**.traffic.platoonInsertDistance = ${5 ! controller}m
**.traffic.platoonInsertHeadway = ${0 ! controller}s

*.node[*].unicast.packetLossRate = ${packetLossRate = 0, 0.05, 0.1, 0.25, 0.5}
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 35 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${packetLossRate}_${repetition}.sca


[Config SinusoidalNoGui]
extends = Sinusoidal

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config BrakingNoGui]
extends = Braking

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Braking_${controller}_${headway}_${actDelay}.vec
output-scalar-file = ${resultdir}/Braking_${controller}_${headway}_${actDelay}.sca

[Config SinusoidalPLossNoGui]
extends = SinusoidalPLoss

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalPLoss_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalPLoss_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config SinusoidalBeacIntNoGui]
extends = SinusoidalBeacInt

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalBeacInt_${controller}_${headway}_${beaconInterval}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalBeacInt_${controller}_${headway}_${beaconInterval}_${repetition}.sca

[Config SinusoidalTxPowerNoGui]
extends = SinusoidalTxPower

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalTxPower_${controller}_${headway}_${txPower}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalTxPower_${controller}_${headway}_${txPower}_${repetition}.sca

[Config SinusoidalThermalNoiseNoGui]
extends = SinusoidalThermalNoise

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalThermalNoise_${controller}_${headway}_${thermalNoise}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalThermalNoise_${controller}_${headway}_${thermalNoise}_${repetition}.sca

[Config SinusoidalActDelayNoGui]
extends = SinusoidalActDelay

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalActDelay_${controller}_${headway}_${actDelay}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalActDelay_${controller}_${headway}_${actDelay}_${repetition}.sca

[Config SinusoidalControllersNoGui]
extends = SinusoidalControllers

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalControllers_${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalControllers_${controller}_${headway}_${packetLossRate}_${repetition}.sca

[Config SinusoidalNoACCNoGui]
extends = SinusoidalNoACC

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SinusoidalNoACC${controller}_${headway}_${packetLossRate}_${repetition}.vec
output-scalar-file = ${resultdir}/SinusoidalNoACC${controller}_${headway}_${packetLossRate}_${repetition}.sca

